@page "/register"
@using IslamicPOS.Core.Services.Auth
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin")]

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h5" Class="mb-4">Register New User</MudText>
            
            <MudForm @ref="_form" @bind-IsValid="@_success">
                <MudTextField T="string" 
                             Label="Username" 
                             @bind-Value="_model.Username" 
                             Required="true"
                             RequiredError="Username is required"
                             Class="mb-4" />
                
                <MudTextField T="string" 
                             Label="Email" 
                             @bind-Value="_model.Email"
                             Required="true"
                             RequiredError="Email is required"
                             Validation="@(new EmailAddressAttribute() {ErrorMessage = "Invalid email address"})"
                             Class="mb-4" />
                
                <MudTextField T="string" 
                             Label="First Name" 
                             @bind-Value="_model.FirstName"
                             Required="true"
                             RequiredError="First name is required"
                             Class="mb-4" />
                
                <MudTextField T="string" 
                             Label="Last Name" 
                             @bind-Value="_model.LastName"
                             Required="true"
                             RequiredError="Last name is required"
                             Class="mb-4" />
                
                <MudSelect T="string" Label="Role" 
                          @bind-Value="_model.Role"
                          Required="true"
                          RequiredError="Role is required"
                          Class="mb-4">
                    <MudSelectItem Value="@("Admin")">Admin</MudSelectItem>
                    <MudSelectItem Value="@("Manager")">Manager</MudSelectItem>
                    <MudSelectItem Value="@("Cashier")">Cashier</MudSelectItem>
                </MudSelect>
                
                <MudTextField T="string" 
                             Label="Password" 
                             @bind-Value="_model.Password"
                             Required="true"
                             RequiredError="Password is required"
                             InputType="InputType.Password"
                             Class="mb-4" />
                
                <MudTextField T="string" 
                             Label="Confirm Password" 
                             @bind-Value="_confirmPassword"
                             Required="true"
                             RequiredError="Please confirm password"
                             InputType="InputType.Password"
                             Validation="@(new Func<string, string>(ConfirmPassword))"
                             Class="mb-6" />
            </MudForm>
        </MudCardContent>
        
        <MudCardActions>
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary"
                       OnClick="RegisterAsync"
                       Disabled="!_success || _processing">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Register User</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private MudForm _form;
    private RegisterRequest _model = new();
    private string _confirmPassword = "";
    private bool _success;
    private bool _processing;

    private string ConfirmPassword(string arg)
    {
        if (_model.Password != arg)
            return "Passwords do not match";
        return null;
    }

    private async Task RegisterAsync()
    {
        if (_processing) return;
        
        try
        {
            _processing = true;
            await _form.Validate();
            
            if (_success)
            {
                var result = await AuthService.RegisterAsync(_model);
                if (result.Success)
                {
                    Snackbar.Add("User registered successfully", Severity.Success);
                    NavigationManager.NavigateTo("/users");
                }
                else
                {
                    Snackbar.Add(result.Message, Severity.Error);
                }
            }
        }
        catch (Exception)
        {
            Snackbar.Add("An error occurred during registration", Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }
}