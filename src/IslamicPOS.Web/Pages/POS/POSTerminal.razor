@page "/pos"
@using IslamicPOS.Core.Models
@using IslamicPOS.Core.Services
@using IslamicPOS.Web.Components.POS
@inject ITransactionService TransactionService
@inject IInventoryService InventoryService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <!-- Left side - Product Search and Grid -->
        <MudItem xs="12" md="8">
            <ProductSearch OnProductSelected="AddToCart" />
            
            @if (_categories?.Any() == true)
            {
                <MudPaper Class="pa-4 mt-4">
                    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true">
                        @foreach (var category in _categories)
                        {
                            <MudTabPanel Text="@category.Name">
                                <div class="d-flex flex-wrap gap-4">
                                    @foreach (var product in _productsByCategory[category.Id])
                                    {
                                        <MudPaper Class="pa-4" Style="width: 200px;" Elevation="2">
                                            <MudText Typo="Typo.h6">@product.Name</MudText>
                                            <MudText Color="Color.Secondary">@product.Price.ToString("C")</MudText>
                                            <MudText Color="@(product.StockQuantity > 0 ? Color.Success : Color.Error)">
                                                Stock: @product.StockQuantity
                                            </MudText>
                                            <MudButton Variant="Variant.Filled"
                                                     Color="Color.Primary"
                                                     OnClick="() => AddToCart(product)"
                                                     Disabled="product.StockQuantity <= 0"
                                                     FullWidth="true"
                                                     Class="mt-2">Add to Cart</MudButton>
                                        </MudPaper>
                                    }
                                </div>
                            </MudTabPanel>
                        }
                    </MudTabs>
                </MudPaper>
            }
        </MudItem>

        <!-- Right side - Shopping Cart -->
        <MudItem xs="12" md="4">
            <ShoppingCart Items="_cartItems"
                         OnItemUpdated="HandleItemUpdated"
                         OnTransactionCompleted="CompleteTransaction"
                         OnCartCleared="ClearCart" />
        </MudItem>
    </MudGrid>

    <!-- Payment Dialog -->
    <MudDialog @bind-IsVisible="_showPayment">
        <TitleContent>
            <MudText Typo="Typo.h6">Process Payment</MudText>
        </TitleContent>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary">
                        @_cartTotal.ToString("C")
                    </MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudSelect T="PaymentMethod" 
                              @bind-Value="_selectedPaymentMethod"
                              Label="Payment Method">
                        <MudSelectItem Value="PaymentMethod.Cash">Cash</MudSelectItem>
                        <MudSelectItem Value="PaymentMethod.Card">Card</MudSelectItem>
                        <MudSelectItem Value="PaymentMethod.BankTransfer">Bank Transfer</MudSelectItem>
                        <MudSelectItem Value="PaymentMethod.DigitalWallet">Digital Wallet</MudSelectItem>
                    </MudSelect>
                </MudItem>

                @if (_selectedPaymentMethod == PaymentMethod.Cash)
                {
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_cashReceived"
                                    Label="Cash Received"
                                    Variant="Variant.Outlined"
                                    Adornment="Adornment.Start"
                                    AdornmentText="$"
                                    OnKeyUp="CalculateChange" />
                    </MudItem>

                    @if (_cashChange > 0)
                    {
                        <MudItem xs="12">
                            <MudAlert Severity="Severity.Info">
                                Change Due: @_cashChange.ToString("C")
                            </MudAlert>
                        </MudItem>
                    }
                }
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CancelPayment">Cancel</MudButton>
            <MudButton Color="Color.Primary" 
                      OnClick="ProcessPayment"
                      Disabled="!CanProcessPayment">Process Payment</MudButton>
        </DialogActions>
    </MudDialog>

    <!-- Receipt Dialog -->
    <MudDialog @bind-IsVisible="_showReceipt">
        <TitleContent>
            <MudText Typo="Typo.h6">Transaction Receipt</MudText>
        </TitleContent>
        <DialogContent>
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Islamic POS System</MudText>
                <MudText Align="Align.Center" Class="mb-4">@DateTime.Now.ToString("g")</MudText>

                <MudDivider Class="my-4" />

                @foreach (var item in _cartItems)
                {
                    <div class="d-flex justify-space-between mb-2">
                        <div>
                            <MudText>@item.ProductName</MudText>
                            <MudText Typo="Typo.caption">@item.Quantity x @item.UnitPrice.ToString("C")</MudText>
                        </div>
                        <MudText>@item.Subtotal.ToString("C")</MudText>
                    </div>
                }

                <MudDivider Class="my-4" />

                <div class="d-flex justify-space-between mb-2">
                    <MudText>Subtotal:</MudText>
                    <MudText>@_cartSubtotal.ToString("C")</MudText>
                </div>
                <div class="d-flex justify-space-between mb-2">
                    <MudText>Tax (15%):</MudText>
                    <MudText>@_cartTax.ToString("C")</MudText>
                </div>
                <div class="d-flex justify-space-between">
                    <MudText Typo="Typo.h6">Total:</MudText>
                    <MudText Typo="Typo.h6">@_cartTotal.ToString("C")</MudText>
                </div>

                @if (_selectedPaymentMethod == PaymentMethod.Cash)
                {
                    <MudDivider Class="my-4" />
                    <div class="d-flex justify-space-between mb-2">
                        <MudText>Cash Received:</MudText>
                        <MudText>@_cashReceived.ToString("C")</MudText>
                    </div>
                    <div class="d-flex justify-space-between">
                        <MudText>Change:</MudText>
                        <MudText>@_cashChange.ToString("C")</MudText>
                    </div>
                }

                <MudDivider Class="my-4" />

                <MudText Align="Align.Center">Thank you for your business!</MudText>
            </MudPaper>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => _showReceipt = false">Close</MudButton>
            <MudButton Color="Color.Primary" OnClick="PrintReceipt">Print</MudButton>
        </DialogActions>
    </MudDialog>
</MudContainer>

@code {
    private List<TransactionItem> _cartItems = new();
    private List<ProductCategory> _categories;
    private Dictionary<int, List<Product>> _productsByCategory;
    private bool _showPayment;
    private bool _showReceipt;
    private PaymentMethod _selectedPaymentMethod = PaymentMethod.Cash;
    private decimal _cashReceived;
    private decimal _cashChange;

    private decimal _cartSubtotal => _cartItems.Sum(i => i.Subtotal);
    private decimal _cartTax => Math.Round(_cartSubtotal * 0.15m, 2);
    private decimal _cartTotal => _cartSubtotal + _cartTax;

    private bool CanProcessPayment =>
        _selectedPaymentMethod != PaymentMethod.Cash ||
        (_cashReceived >= _cartTotal);

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadProducts();
    }

    private async Task LoadCategories()
    {
        _categories = await CategoryService.GetAllCategories();
    }

    private async Task LoadProducts()
    {
        _productsByCategory = new Dictionary<int, List<Product>>();
        foreach (var category in _categories)
        {
            _productsByCategory[category.Id] = await ProductService.GetProductsByCategory(category.Id);
        }
    }

    private void AddToCart(Product product)
    {
        var existingItem = _cartItems.FirstOrDefault(i => i.ProductId == product.Id);

        if (existingItem != null)
        {
            if (existingItem.Quantity < product.StockQuantity)
            {
                existingItem.Quantity++;
            }
            else
            {
                Snackbar.Add("Insufficient stock", Severity.Warning);
            }
        }
        else if (product.StockQuantity > 0)
        {
            _cartItems.Add(new TransactionItem
            {
                ProductId = product.Id,
                ProductName = product.Name,
                UnitPrice = product.Price,
                Quantity = 1
            });
        }
    }

    private void HandleItemUpdated(TransactionItem item)
    {
        if (item.Quantity <= 0)
        {
            _cartItems.Remove(item);
        }
        StateHasChanged();
    }

    private async Task InitiatePayment()
    {
        if (!_cartItems.Any()) return;
        _showPayment = true;
    }

    private void CalculateChange()
    {
        _cashChange = _cashReceived >= _cartTotal ? _cashReceived - _cartTotal : 0;
    }

    private void CancelPayment()
    {
        _showPayment = false;
        _cashReceived = 0;
        _cashChange = 0;
    }

    private async Task ProcessPayment()
    {
        if (!CanProcessPayment) return;

        var transaction = new Transaction
        {
            Id = Guid.NewGuid(),
            Timestamp = DateTime.UtcNow,
            Items = _cartItems.ToList(),
            TotalAmount = _cartTotal,
            Status = TransactionStatus.Completed,
            PaymentMethod = _selectedPaymentMethod
        };

        try
        {
            // Process transaction
            await TransactionService.CreateTransaction(transaction);

            // Update inventory
            foreach (var item in transaction.Items)
            {
                await InventoryService.RemoveStock(
                    item.ProductId,
                    item.Quantity,
                    transaction.Id.ToString(),
                    "Sale"
                );
            }

            _showPayment = false;
            _showReceipt = true;

            // Clear cart after showing receipt
            await ClearCart();

            Snackbar.Add("Transaction completed successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error processing transaction", Severity.Error);
            // Log the error
        }
    }

    private async Task ClearCart()
    {
        _cartItems.Clear();
        _cashReceived = 0;
        _cashChange = 0;
        StateHasChanged();
    }

    private async Task PrintReceipt()
    {
        // TODO: Implement print functionality
        await Task.Delay(1); // Placeholder
    }
}