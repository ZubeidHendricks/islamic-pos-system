@page "/pos"
@using IslamicPOS.Core.Models
@using IslamicPOS.Core.Services
@using IslamicPOS.Web.Components.POS
@inject ITransactionService TransactionService
@inject IInventoryService InventoryService
@inject IIslamicFinanceService IslamicFinanceService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

... [previous content remains the same until payment processing] ...

@code {
    private async Task ProcessPayment()
    {
        if (!CanProcessPayment) return;

        var transaction = new Transaction
        {
            Id = Guid.NewGuid(),
            Timestamp = DateTime.UtcNow,
            Items = _cartItems.ToList(),
            TotalAmount = _cartTotal,
            PaymentMethod = _selectedPaymentMethod
        };

        try
        {
            // Validate Islamic compliance
            if (!await IslamicFinanceService.ValidateTransaction(transaction))
            {
                Snackbar.Add("Transaction does not comply with Islamic finance principles", Severity.Error);
                return;
            }

            // Add compliance information
            transaction.ComplianceNotice = IslamicFinanceService.GetTransactionComplianceNotice(transaction);
            transaction.ZakatAmount = IslamicFinanceService.CalculateZakat(transaction.TotalAmount);
            (transaction.MerchantShare, transaction.PartnerShare) = 
                IslamicFinanceService.CalculateProfitSharing(transaction.TotalAmount);

            // Process transaction
            await TransactionService.CreateTransaction(transaction);

            // Update inventory
            foreach (var item in transaction.Items)
            {
                await InventoryService.RemoveStock(
                    item.ProductId,
                    item.Quantity,
                    transaction.Id.ToString(),
                    "Halal Sale"
                );
            }

            _showPayment = false;
            _showReceipt = true;

            // Clear cart after showing receipt
            await ClearCart();

            Snackbar.Add("Halal transaction completed successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error processing transaction", Severity.Error);
            _logger.LogError(ex, "Error processing Islamic finance transaction");
        }
    }

    // Other existing code remains the same
}