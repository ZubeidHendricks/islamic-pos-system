@page "/users"
@using Microsoft.AspNetCore.Identity
@using IslamicPOS.Core.Models
@attribute [Authorize(Roles = "Admin")]
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudToolBar Dense="true">
            <MudText Typo="Typo.h6">User Management</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled"
                      Color="Color.Primary"
                      StartIcon="@Icons.Material.Filled.Add"
                      Href="/register">Add User</MudButton>
        </MudToolBar>

        <MudTable Items="@_users"
                 Dense="true"
                 Hover="true"
                 Loading="_loading"
                 Filter="new Func<ApplicationUser,bool>(FilterFunc)"
                 @bind-SelectedItem="_selectedUser">
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString"
                            Placeholder="Search"
                            Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            IconSize="Size.Medium"
                            Class="mt-0" />
            </ToolBarContent>
            
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Role</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Last Login</MudTh>
                <MudTh></MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Name">@($"{@context.FirstName} {@context.LastName}")</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Role">
                    @{
                        var roles = await UserManager.GetRolesAsync(context);
                        <MudChip Color="GetRoleColor(roles.FirstOrDefault())" Size="Size.Small">
                            @(roles.FirstOrDefault() ?? "No Role")
                        </MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Status">
                    @if (context.LockoutEnd > DateTimeOffset.UtcNow)
                    {
                        <MudChip Color="Color.Error" Size="Size.Small">Locked</MudChip>
                    }
                    else if (!context.EmailConfirmed)
                    {
                        <MudChip Color="Color.Warning" Size="Size.Small">Pending</MudChip>
                    }
                    else
                    {
                        <MudChip Color="Color.Success" Size="Size.Small">Active</MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Last Login">
                    @(context.LastLoginAt?.ToString("MMM dd, yyyy HH:mm") ?? "Never")
                </MudTd>
                <MudTd>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                        <MudMenuItem OnClick="() => EditUser(context)">Edit</MudMenuItem>
                        <MudMenuItem OnClick="() => ResetPassword(context)">Reset Password</MudMenuItem>
                        @if (context.LockoutEnd > DateTimeOffset.UtcNow)
                        {
                            <MudMenuItem OnClick="() => UnlockUser(context)">Unlock User</MudMenuItem>
                        }
                        else
                        {
                            <MudMenuItem OnClick="() => LockUser(context)">Lock User</MudMenuItem>
                        }
                        @if (context.EmailConfirmed)
                        {
                            <MudMenuItem OnClick="() => ResendConfirmation(context)">Resend Confirmation</MudMenuItem>
                        }
                        <MudMenuItem OnClick="() => DeleteUser(context)" Style="color: var(--mud-palette-error);">Delete</MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private List<ApplicationUser> _users = new();
    private ApplicationUser _selectedUser;
    private bool _loading = true;
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            _loading = true;
            _users = await UserManager.Users.ToListAsync();
        }
        finally
        {
            _loading = false;
        }
    }

    private Color GetRoleColor(string role) => role switch
    {
        "Admin" => Color.Error,
        "Manager" => Color.Warning,
        "Cashier" => Color.Info,
        _ => Color.Default
    };

    private bool FilterFunc(ApplicationUser user) =>
        string.IsNullOrWhiteSpace(_searchString) ||
        user.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        user.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        user.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase);

    private async Task EditUser(ApplicationUser user)
    {
        var parameters = new DialogParameters
        {
            { "User", user },
            { "AvailableRoles", await RoleManager.Roles.Select(r => r.Name).ToListAsync() }
        };

        var dialog = await DialogService.ShowAsync<EditUserDialog>("Edit User", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadUsers();
            Snackbar.Add("User updated successfully", Severity.Success);
        }
    }

    private async Task ResetPassword(ApplicationUser user)
    {
        var dialog = await DialogService.ShowAsync<ResetPasswordDialog>(
            "Reset Password",
            new DialogParameters { { "User", user } });

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Snackbar.Add("Password reset email sent", Severity.Success);
        }
    }

    private async Task LockUser(ApplicationUser user)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Lock User",
            $"Are you sure you want to lock {user.Email}?",
            yesText: "Lock",
            noText: "Cancel");

        if (confirm ?? false)
        {
            await UserManager.SetLockoutEndDateAsync(user, DateTimeOffset.UtcNow.AddDays(30));
            await LoadUsers();
            Snackbar.Add("User locked successfully", Severity.Success);
        }
    }

    private async Task UnlockUser(ApplicationUser user)
    {
        await UserManager.SetLockoutEndDateAsync(user, null);
        await LoadUsers();
        Snackbar.Add("User unlocked successfully", Severity.Success);
    }

    private async Task ResendConfirmation(ApplicationUser user)
    {
        // TODO: Implement email confirmation resend
        Snackbar.Add("Confirmation email sent", Severity.Success);
    }

    private async Task DeleteUser(ApplicationUser user)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Delete User",
            $"Are you sure you want to delete {user.Email}? This action cannot be undone.",
            yesText: "Delete",
            noText: "Cancel");

        if (confirm ?? false)
        {
            await UserManager.DeleteAsync(user);
            await LoadUsers();
            Snackbar.Add("User deleted successfully", Severity.Success);
        }
    }
}