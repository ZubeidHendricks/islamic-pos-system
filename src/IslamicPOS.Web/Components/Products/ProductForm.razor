@using IslamicPOS.Application.Products.Commands.CreateProduct
@using MediatR
@inject IMediator Mediator
@inject NavigationManager NavigationManager

<EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card">
        <div class="card-body">
            <div class="mb-3">
                <label for="name" class="form-label">Product Name</label>
                <InputText id="name" class="form-control" @bind-Value="model.Name" />
                <ValidationMessage For="@(() => model.Name)" />
            </div>

            <div class="mb-3">
                <label for="sku" class="form-label">SKU</label>
                <InputText id="sku" class="form-control" @bind-Value="model.SKU" />
                <ValidationMessage For="@(() => model.SKU)" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" class="form-control" @bind-Value="model.Description" />
                <ValidationMessage For="@(() => model.Description)" />
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="price" class="form-label">Price</label>
                    <InputNumber id="price" class="form-control" @bind-Value="model.Price" />
                    <ValidationMessage For="@(() => model.Price)" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="currency" class="form-label">Currency</label>
                    <InputSelect id="currency" class="form-control" @bind-Value="model.Currency">
                        <option value="USD">USD</option>
                        <option value="EUR">EUR</option>
                        <option value="GBP">GBP</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => model.Currency)" />
                </div>
            </div>

            <div class="mb-3">
                <label for="minimumStock" class="form-label">Minimum Stock Level</label>
                <InputNumber id="minimumStock" class="form-control" @bind-Value="model.MinimumStockLevel" />
                <ValidationMessage For="@(() => model.MinimumStockLevel)" />
            </div>

            <div class="mb-3">
                <div class="form-check">
                    <InputCheckbox id="isHalal" class="form-check-input" @bind-Value="model.IsHalal" />
                    <label class="form-check-label" for="isHalal">Halal Certified</label>
                </div>
            </div>

            @if (model.IsHalal)
            {
                <div class="mb-3">
                    <label for="halalCert" class="form-label">Halal Certification Number</label>
                    <InputText id="halalCert" class="form-control" @bind-Value="model.HalalCertification" />
                    <ValidationMessage For="@(() => model.HalalCertification)" />
                </div>
            }

            <div class="mb-3">
                <label for="category" class="form-label">Category</label>
                <InputSelect id="category" class="form-control" @bind-Value="model.CategoryId">
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => model.CategoryId)" />
            </div>

            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                <button type="button" class="btn btn-secondary me-md-2" @onclick="Cancel">Cancel</button>
                <button type="submit" class="btn btn-primary">Save Product</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private CreateProductCommand model = new();
    private List<ProductCategory> Categories = new();

    protected override async Task OnInitializedAsync()
    {
        // TODO: Load categories from API
        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit()
    {
        var result = await Mediator.Send(model);

        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo("/products");
        }
        else
        {
            // TODO: Show error message
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/products");
    }
}