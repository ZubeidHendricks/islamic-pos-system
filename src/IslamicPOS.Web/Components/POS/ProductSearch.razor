@using IslamicPOS.Core.Models
@inject IProductService ProductService

<MudGrid>
    <MudItem xs="12">
        <MudTextField @bind-Value="_searchQuery"
                    Label="Search Products"
                    Variant="Variant.Outlined"
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    OnKeyDown="HandleKeyPress"
                    DebounceInterval="300"
                    Class="mb-4" />
    </MudItem>

    <MudItem xs="12">
        <MudTextField @bind-Value="_barcode"
                    Label="Barcode Scanner"
                    Variant="Variant.Outlined"
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.QrCodeScanner"
                    OnKeyDown="HandleBarcodeScanner"
                    @ref="_barcodeInput"
                    Class="mb-4" />
    </MudItem>

    @if (_products?.Any() == true)
    {
        <MudItem xs="12">
            <div class="d-flex flex-wrap gap-4">
                @foreach (var product in _products)
                {
                    <MudPaper Class="pa-4" Style="width: 200px;">
                        <MudText Typo="Typo.h6">@product.Name</MudText>
                        <MudText Color="Color.Secondary">@product.Price.ToString("C")</MudText>
                        <MudText Color="@(product.StockQuantity > 0 ? Color.Success : Color.Error)">
                            Stock: @product.StockQuantity
                        </MudText>
                        <MudButton Variant="Variant.Filled"
                                 Color="Color.Primary"
                                 OnClick="() => OnProductSelected.InvokeAsync(product)"
                                 Disabled="product.StockQuantity <= 0"
                                 FullWidth="true"
                                 Class="mt-2">Add to Cart</MudButton>
                    </MudPaper>
                }
            </div>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter] public EventCallback<Product> OnProductSelected { get; set; }

    private string _searchQuery = "";
    private string _barcode = "";
    private IEnumerable<Product>? _products;
    private MudTextField<string>? _barcodeInput;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts(string? query = null)
    {
        _products = await ProductService.SearchProducts(query ?? _searchQuery);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadProducts();
        }
    }

    private async Task HandleBarcodeScanner(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(_barcode))
        {
            var product = await ProductService.GetProductByBarcode(_barcode);
            if (product != null)
            {
                await OnProductSelected.InvokeAsync(product);
                _barcode = "";
                if (_barcodeInput != null)
                {
                    await _barcodeInput.Clear();
                }
            }
        }
    }
}