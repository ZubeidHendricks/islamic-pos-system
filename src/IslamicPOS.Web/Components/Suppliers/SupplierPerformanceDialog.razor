@using IslamicPOS.Core.Models
@using IslamicPOS.Core.Services
@inject IPurchaseOrderService PurchaseOrderService

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: auto; padding: 0;">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6">@SupplierName Performance Overview</MudText>
                </MudItem>

                <!-- Performance Stats -->
                <MudItem xs="12" sm="6">
                    <MudPaper Class="pa-4" Elevation="0">
                        <MudText><strong>Total Orders:</strong></MudText>
                        <MudText Typo="Typo.h5">@Performance.TotalOrders</MudText>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudPaper Class="pa-4" Elevation="0">
                        <MudText><strong>Total Value:</strong></MudText>
                        <MudText Typo="Typo.h5">@Performance.TotalValue.ToString("C")</MudText>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudPaper Class="pa-4" Elevation="0">
                        <MudText><strong>Average Order Value:</strong></MudText>
                        <MudText Typo="Typo.h5">@Performance.AverageOrderValue.ToString("C")</MudText>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudPaper Class="pa-4" Elevation="0">
                        <MudText><strong>On-Time Delivery Rate:</strong></MudText>
                        <MudText Typo="Typo.h5">@Performance.OnTimeDeliveryRate.ToString("F1")%</MudText>
                    </MudPaper>
                </MudItem>

                <!-- Delivery Performance Chart -->
                <MudItem xs="12">
                    <MudPaper Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Delivery Performance</MudText>
                        <MudChart ChartType="ChartType.Donut" 
                                 InputData="@_deliveryData"
                                 InputLabels="@_deliveryLabels" 
                                 Width="300px" Height="300px">
                            <CustomGraphics>
                                <MudChartLegend />
                            </CustomGraphics>
                        </MudChart>
                    </MudPaper>
                </MudItem>

                <!-- Monthly Order History -->
                <MudItem xs="12">
                    <MudPaper Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Monthly Order History</MudText>
                        <MudChart ChartType="ChartType.Line"
                                 ChartSeries="@_orderSeries"
                                 XAxisLabels="@_monthLabels"
                                 Width="100%" Height="350px">
                            <CustomGraphics>
                                <MudChartLegend />
                            </CustomGraphics>
                        </MudChart>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public int SupplierId { get; set; }
    [Parameter] public string SupplierName { get; set; } = null!;
    [Parameter] public SupplierPerformance Performance { get; set; } = null!;

    private double[] _deliveryData = null!;
    private string[] _deliveryLabels = null!;
    private List<ChartSeries> _orderSeries = new();
    private string[] _monthLabels = null!;

    protected override async Task OnInitializedAsync()
    {
        await InitializeCharts();
    }

    private async Task InitializeCharts()
    {
        // Initialize delivery performance donut chart
        _deliveryData = new[]
        {
            Performance.OnTimeDeliveries,
            Performance.LateDeliveries,
            Performance.ReturnedOrders
        }.Select(x => (double)x).ToArray();

        _deliveryLabels = new[]
        {
            $"On Time ({Performance.OnTimeDeliveries})",
            $"Late ({Performance.LateDeliveries})",
            $"Returned ({Performance.ReturnedOrders})"
        };

        // Initialize monthly order history line chart
        var endDate = DateTime.UtcNow;
        var startDate = endDate.AddMonths(-6);
        var orders = await PurchaseOrderService.GetSupplierOrders(SupplierId);

        var monthlyData = orders
            .Where(o => o.OrderDate >= startDate && o.OrderDate <= endDate)
            .GroupBy(o => new { Month = o.OrderDate.Month, Year = o.OrderDate.Year })
            .OrderBy(g => g.Key.Year)
            .ThenBy(g => g.Key.Month)
            .Select(g => new
            {
                Month = new DateTime(g.Key.Year, g.Key.Month, 1),
                OrderCount = g.Count(),
                OrderValue = g.Sum(o => o.TotalAmount)
            })
            .ToList();

        _monthLabels = monthlyData.Select(d => d.Month.ToString("MMM yy")).ToArray();

        _orderSeries = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Order Count",
                Data = monthlyData.Select(d => (double)d.OrderCount).ToArray()
            },
            new ChartSeries
            {
                Name = "Order Value ($)",
                Data = monthlyData.Select(d => (double)d.OrderValue).ToArray()
            }
        };
    }

    private void Close() => MudDialog.Close();
}