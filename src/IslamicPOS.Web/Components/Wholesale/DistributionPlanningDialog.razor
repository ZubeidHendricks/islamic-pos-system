@using IslamicPOS.Core.Models.Wholesale
@inject IDistributionPlanningService DistributionService

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: auto; padding: 0;">
            <MudGrid>
                <!-- Order Details -->
                <MudItem xs="12">
                    <MudText Typo="Typo.h6">Distribution Plan for Order @Order.OrderNumber</MudText>
                </MudItem>

                <!-- Distribution Plan -->
                <MudItem xs="12">
                    <MudTable Items="@_plan.Items" Dense="true" Hover="true">
                        <HeaderContent>
                            <MudTh>Product</MudTh>
                            <MudTh>Quantity</MudTh>
                            <MudTh>Inspection Level</MudTh>
                            <MudTh>Priority</MudTh>
                            <MudTh>Special Handling</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Product">@context.ProductName</MudTd>
                            <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
                            <MudTd DataLabel="Inspection Level">
                                <MudChip Color="@GetInspectionColor(context.InspectionLevel)" Size="Size.Small">
                                    @context.InspectionLevel
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Priority">
                                <MudRating ReadOnly="true" SelectedValue="@context.ProcessingPriority" />
                            </MudTd>
                            <MudTd DataLabel="Special Handling">
                                @if (context.SpecialHandling.Any())
                                {
                                    <MudChipSet>
                                        @foreach (var handling in context.SpecialHandling)
                                        {
                                            <MudChip Size="Size.Small">@handling</MudChip>
                                        }
                                    </MudChipSet>
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>

                <!-- Schedule -->
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mt-4">Processing Schedule</MudText>
                    <MudTimeline>
                        @foreach (var slot in _schedule.TimeSlots.OrderBy(s => s.StartTime))
                        {
                            <MudTimelineItem Color="@GetTimeSlotColor(slot)">
                                <ItemContent>
                                    <MudText>@slot.ProductName</MudText>
                                    <MudText Typo="Typo.caption">
                                        @slot.StartTime.ToString("HH:mm") - @slot.EndTime.ToString("HH:mm")
                                    </MudText>
                                </ItemContent>
                            </MudTimelineItem>
                        }
                    </MudTimeline>
                </MudItem>

                <!-- Quality Checkpoints -->
                <MudItem xs="12">
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudText>Quality Control Requirements</MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudList Dense="true">
                                @foreach (var checkpoint in _plan.ValidationRules)
                                {
                                    <MudListItem>
                                        <div class="d-flex justify-space-between align-center">
                                            <div>
                                                <MudText>@checkpoint.Name</MudText>
                                                <MudText Typo="Typo.caption">Level: @checkpoint.ValidationLevel</MudText>
                                            </div>
                                            @if (checkpoint.Required)
                                            {
                                                <MudChip Color="Color.Error" Size="Size.Small">Required</MudChip>
                                            }
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudItem>

                <!-- Action Buttons -->
                <MudItem xs="12" Class="d-flex justify-center gap-4">
                    @if (_plan.RequiresManualReview)
                    {
                        <MudButton Variant="Variant.Filled"
                                  Color="Color.Warning"
                                  OnClick="RequestManagerReview">Request Manager Review</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled"
                                  Color="Color.Success"
                                  OnClick="ApproveAndStart">Approve and Start</MudButton>
                    }
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public VendorOrder Order { get; set; } = null!;

    private DistributionPlan _plan = new();
    private DeliverySchedule _schedule = new();
    private bool _processing;

    protected override async Task OnInitializedAsync()
    {
        _plan = await DistributionService.GenerateDistributionPlan(
            Order.Items.Select(i => i.Product).ToList(),
            Order.VendorScore);

        _schedule = await DistributionService.GenerateDeliverySchedule(_plan);
    }

    private Color GetInspectionColor(InspectionLevel level) => level switch
    {
        InspectionLevel.Detailed => Color.Error,
        InspectionLevel.Standard => Color.Warning,
        _ => Color.Success
    };

    private Color GetTimeSlotColor(TimeSlot slot)
    {
        if (slot.Priority >= 3) return Color.Error;
        if (slot.Priority >= 2) return Color.Warning;
        return Color.Info;
    }

    private async Task ApproveAndStart()
    {
        try
        {
            _processing = true;
            await DistributionService.StartOrderProcessing(Order.Id, _plan);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error starting processing: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task RequestManagerReview()
    {
        try
        {
            _processing = true;
            await DistributionService.RequestManagerReview(Order.Id, _plan);
            MudDialog.Close(DialogResult.Ok(false));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error requesting review: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }
}