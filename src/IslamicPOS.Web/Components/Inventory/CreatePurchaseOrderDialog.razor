@using IslamicPOS.Core.Models
@using IslamicPOS.Core.Models.InventoryManagement
@inject ISupplierService SupplierService
@inject IPurchaseOrderService PurchaseOrderService

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: auto; padding: 0;">
            <MudForm Model="@_order" @ref="@_form">
                <MudGrid>
                    <!-- Supplier Selection -->
                    <MudItem xs="12">
                        <MudAutocomplete T="Supplier"
                                        Label="Supplier"
                                        @bind-Value="_selectedSupplier"
                                        SearchFunc="SearchSuppliers"
                                        ToStringFunc="s => s.Name"
                                        Required="true"
                                        RequiredError="Supplier is required" />
                    </MudItem>

                    <!-- Expected Delivery Date -->
                    <MudItem xs="12">
                        <MudDatePicker @bind-Date="_order.ExpectedDeliveryDate"
                                      Label="Expected Delivery Date"
                                      Required="true"
                                      RequiredError="Delivery date is required"
                                      DisablePastDates="true" />
                    </MudItem>

                    <!-- Order Items -->
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Class="mb-4">Order Items</MudText>
                        <MudTable Items="@_orderItems" Dense="true" Hover="true">
                            <HeaderContent>
                                <MudTh>Product</MudTh>
                                <MudTh>Current Stock</MudTh>
                                <MudTh>Order Quantity</MudTh>
                                <MudTh>Unit Cost</MudTh>
                                <MudTh>Subtotal</MudTh>
                                <MudTh></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Product">@context.Product.Name</MudTd>
                                <MudTd DataLabel="Current Stock">@context.Product.StockQuantity</MudTd>
                                <MudTd DataLabel="Order Quantity">
                                    <MudNumericField @bind-Value="context.Quantity"
                                                   Min="1"
                                                   OnlyNumbers="true"
                                                   HideSpinButtons="true"
                                                   Style="width: 100px;"
                                                   Immediate="true"
                                                   @onchange="() => CalculateSubtotal(context)" />
                                </MudTd>
                                <MudTd DataLabel="Unit Cost">
                                    <MudNumericField @bind-Value="context.UnitCost"
                                                   Min="0"
                                                   Format="C"
                                                   Style="width: 120px;"
                                                   Immediate="true"
                                                   @onchange="() => CalculateSubtotal(context)" />
                                </MudTd>
                                <MudTd DataLabel="Subtotal">@context.Subtotal.ToString("C")</MudTd>
                                <MudTd>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                 Size="Size.Small"
                                                 OnClick="() => RemoveItem(context)" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudItem>

                    <!-- Total -->
                    <MudItem xs="12" Class="d-flex justify-end">
                        <MudText Typo="Typo.h6">Total: @(_orderItems.Sum(i => i.Subtotal).ToString("C"))</MudText>
                    </MudItem>

                    <!-- Notes -->
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_order.Notes"
                                    Label="Notes"
                                    Lines="3" />
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Create Order</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public List<StockAlert> LowStockItems { get; set; } = null!;

    private PurchaseOrder _order = new() { OrderDate = DateTime.UtcNow };
    private List<PurchaseOrderItem> _orderItems = new();
    private Supplier? _selectedSupplier;
    private MudForm _form = null!;

    protected override void OnInitialized()
    {
        foreach (var alert in LowStockItems)
        {
            var recommendedQuantity = Math.Max(
                alert.ReorderPoint - alert.CurrentStock,
                (int)(alert.AverageDailySales * 30) // 30 days supply
            );

            _orderItems.Add(new PurchaseOrderItem
            {
                Product = new Product { Id = alert.ProductId, Name = alert.ProductName },
                Quantity = recommendedQuantity,
                UnitCost = 0 // To be filled by user
            });
        }
    }

    private async Task<IEnumerable<Supplier>> SearchSuppliers(string value)
    {
        return string.IsNullOrEmpty(value)
            ? await SupplierService.GetAllSuppliers()
            : await SupplierService.SearchSuppliers(value);
    }

    private void CalculateSubtotal(PurchaseOrderItem item)
    {
        item.Subtotal = item.Quantity * item.UnitCost;
        StateHasChanged();
    }

    private void RemoveItem(PurchaseOrderItem item)
    {
        _orderItems.Remove(item);
        StateHasChanged();
    }

    private async Task Submit()
    {
        await _form.Validate();
        if (!_form.IsValid || _selectedSupplier == null || !_orderItems.Any())
            return;

        _order.SupplierId = _selectedSupplier.Id;
        _order.Items = _orderItems;
        _order.TotalAmount = _orderItems.Sum(i => i.Subtotal);

        await PurchaseOrderService.CreatePurchaseOrder(_order);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();
}