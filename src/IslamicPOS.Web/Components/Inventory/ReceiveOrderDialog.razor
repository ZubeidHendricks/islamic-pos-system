@using IslamicPOS.Core.Models.InventoryManagement
@using IslamicPOS.Core.Services
@inject IPurchaseOrderService PurchaseOrderService
@inject IInventoryManager InventoryManager

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: auto; padding: 0;">
            <MudGrid>
                <!-- Order Info -->
                <MudItem xs="12">
                    <MudPaper Class="pa-4" Elevation="0">
                        <MudText><strong>Order #:</strong> @Order.OrderNumber</MudText>
                        <MudText><strong>Supplier:</strong> @Order.Supplier.Name</MudText>
                        <MudText><strong>Order Date:</strong> @Order.OrderDate.ToString("MMM dd, yyyy")</MudText>
                    </MudPaper>
                </MudItem>

                <!-- Items Table -->
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Receive Items</MudText>
                    <MudTable Items="@_receivedItems" Dense="true" Hover="true">
                        <HeaderContent>
                            <MudTh>Product</MudTh>
                            <MudTh>Ordered</MudTh>
                            <MudTh>Received</MudTh>
                            <MudTh>Unit Cost</MudTh>
                            <MudTh>Status</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Product">@context.Product.Name</MudTd>
                            <MudTd DataLabel="Ordered">@context.OrderedQuantity</MudTd>
                            <MudTd DataLabel="Received">
                                <MudNumericField @bind-Value="context.ReceivedQuantity"
                                               Min="0"
                                               Max="context.OrderedQuantity"
                                               Immediate="true"
                                               Style="width: 100px;"
                                               OnBlur="() => ValidateReceivedQuantity(context)" />
                            </MudTd>
                            <MudTd DataLabel="Unit Cost">@context.UnitCost.ToString("C")</MudTd>
                            <MudTd DataLabel="Status">
                                <MudChip Color="@GetStatusColor(context)" Size="Size.Small">
                                    @GetStatusText(context)
                                </MudChip>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>

                <!-- Notes -->
                <MudItem xs="12">
                    <MudTextField @bind-Value="_notes"
                                Label="Receiving Notes"
                                Required="true"
                                Lines="3" />
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                  OnClick="Submit"
                  Disabled="!CanSubmit">Complete Receipt</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public PurchaseOrder Order { get; set; } = null!;

    private List<ReceivedItem> _receivedItems = new();
    private string _notes = "";

    private bool CanSubmit =>
        !string.IsNullOrWhiteSpace(_notes) &&
        _receivedItems.Any(i => i.ReceivedQuantity > 0);

    protected override void OnInitialized()
    {
        foreach (var item in Order.Items)
        {
            _receivedItems.Add(new ReceivedItem
            {
                Product = item.Product,
                OrderedQuantity = item.Quantity,
                ReceivedQuantity = item.Quantity, // Default to full quantity
                UnitCost = item.UnitCost
            });
        }
    }

    private void ValidateReceivedQuantity(ReceivedItem item)
    {
        if (item.ReceivedQuantity > item.OrderedQuantity)
        {
            item.ReceivedQuantity = item.OrderedQuantity;
        }
    }

    private Color GetStatusColor(ReceivedItem item)
    {
        if (item.ReceivedQuantity == 0) return Color.Error;
        if (item.ReceivedQuantity < item.OrderedQuantity) return Color.Warning;
        return Color.Success;
    }

    private string GetStatusText(ReceivedItem item)
    {
        if (item.ReceivedQuantity == 0) return "Not Received";
        if (item.ReceivedQuantity < item.OrderedQuantity) return "Partial";
        return "Complete";
    }

    private async Task Submit()
    {
        if (!CanSubmit) return;

        // Create a stock movement for each received item
        foreach (var item in _receivedItems.Where(i => i.ReceivedQuantity > 0))
        {
            await InventoryManager.AdjustStock(
                item.Product.Id,
                item.ReceivedQuantity,
                $"PO Receipt - {Order.OrderNumber}");
        }

        // Update order status
        var allReceived = _receivedItems.All(i => 
            i.ReceivedQuantity == i.OrderedQuantity);

        var status = allReceived ? "Received" : "Partially Received";
        await PurchaseOrderService.UpdateOrderStatus(Order.Id, status);

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();

    private class ReceivedItem
    {
        public Product Product { get; set; } = null!;
        public int OrderedQuantity { get; set; }
        public int ReceivedQuantity { get; set; }
        public decimal UnitCost { get; set; }
    }
}